library(BisqueRNA)
library(DESeq2)
library(Seurat)
library(dplyr)
library(ggplot2)
#https://www.bioinformatics.nl/courses/RNAseq/2a_Differential_Expression_lab.pdf
library(sleuth)
#Code begins
#https://bioconductor.org/packages/release/bioc/vignettes/tximport/inst/doc/tximport.html
library(readr)
set.seed(123)
library(sva)
library(pheatmap)
library(tidyverse)
library(RColorBrewer)
library(tximport)
library(magrittr)
library(SingleCellExperiment)
library(patchwork)
library(ggrepel)
library(wordcloud)
library(RColorBrewer)
library(eulerr)
library(wordcloud2)
library(tm)
library("clusterProfiler")
library("gplots")
library("devtools")
library("DOSE")
library("dplyr")
library("ggplot2")
library("AnnotationDbi")
library("BiocParallel")
library("RColorBrewer")
library("org.Mm.eg.db")
library(enrichplot)
library("ggupset")
library(ggsignif)
library(gplots)
library(reshape)
library(ggvenn)
library(readxl)
set.seed(123)

samples<-read.table(file="~/cotney/rawdata/GEO/mouse/embryonictoot/bulkRNAseq/s2c.txt")
files <- paste(as.vector(samples$V3), "/abundance.h5", sep="")
all(file.exists(files))
tr2g <- read_tsv("~/cotney/genome/mm10/STAR/mus_musculus/transcripts_to_genes.txt", col_names = c("transcript", "gene", "gene_symbol")) 
t2g<-data.frame(tr2g$transcript, tr2g$gene_symbol)
colnames(t2g)<-c("TXNAME", "GENESYM")
library(tximport)
txi.kallisto<-tximport(files, type="kallisto", txOut=FALSE, tx2gene=t2g)
names(txi.kallisto)
head(txi.kallisto$counts)
names(txi.kallisto$infReps)
dim(txi.kallisto$infReps$sample1)
colnames(txi.kallisto$counts)<-levels(samples$V1)
sampleTable <- data.frame(dex = factor(rep(c("e13.5_molar", "e14.5_molar", "e16.5_molar"), each = 7)))
rownames(sampleTable) <- colnames(txi.kallisto$counts)
sampleTable$id<-rownames(sampleTable)
dds <- DESeqDataSetFromTximport(txi.kallisto, sampleTable, ~dex)

keep <- rowSums(counts(dds)) >= 100
dds <- dds[keep,]
dds<-dds[,-1]
dds <- DESeq(dds, fitType='local')
rld<-rlog(dds, blind=FALSE)
vsd <- vst(dds, blind = FALSE)

pdf(file='DESeq2_variance.pdf')
lambda <- 10^seq(from = -1, to = 2, length = 1000)
cts <- matrix(rpois(1000*100, lambda), ncol = 100)
library("vsn")
meanSdPlot(cts, ranks = FALSE)
log.cts.one <- log2(cts + 1)
meanSdPlot(log.cts.one, ranks = FALSE)
dds <- estimateSizeFactors(dds)
vsd <- vst(dds, blind = FALSE)
df <- bind_rows(
  as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>%
         mutate(transformation = "log2(x + 1)"),
  as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"),
  as_data_frame(assay(rld)[, 1:2]) %>% mutate(transformation = "rlog"))
colnames(df)[1:2] <- c("x", "y")  
lvls <- c("log2(x + 1)", "vst", "rlog")
df$transformation <- factor(df$transformation, levels=lvls)
ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
  coord_fixed() + facet_grid( . ~ transformation)  
sampleDists <- dist(t(assay(rld)))
sampleDists
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( rld$dex, rld$id, sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
         clustering_distance_rows = sampleDists,
         clustering_distance_cols = sampleDists,
         col = colors)
library("PoiClaClu")
poisd <- PoissonDistance(t(counts(dds)))
samplePoisDistMatrix <- as.matrix( poisd$dd )
rownames(samplePoisDistMatrix) <- paste( dds$dex, dds$cell, sep=" - " )
colnames(samplePoisDistMatrix) <- NULL
pheatmap(samplePoisDistMatrix,
         clustering_distance_rows = poisd$dd,
         clustering_distance_cols = poisd$dd,
         col = colors)
dev.off()


pdf(file="deseq2_pca.pdf")
plotPCA(rld, intgroup = c("dex", "id"))
pcaData <- plotPCA(rld, intgroup = c( "dex", "id"), returnData = TRUE)
pcaData
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(x = PC1, y = PC2, color = id, shape = dex)) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  ggtitle("PCA with VST data")
library("glmpca")
gpca <- glmpca(counts(dds), L=2)
gpca.dat <- gpca$factors
gpca.dat$dex <- dds$dex
gpca.dat$cell <- dds$id
ggplot(gpca.dat, aes(x = dim1, y = dim2, color = cell, shape = dex)) +
  geom_point(size =3) + coord_fixed() + ggtitle("glmpca - Generalized PCA")
mds <- as.data.frame(colData(rld))  %>%  cbind(cmdscale(sampleDistMatrix))
ggplot(mds, aes(x = `1`, y = `2`, color = id, shape = dex)) +
  geom_point(size = 3) + coord_fixed() + ggtitle("MDS with VST data")
mdsPois <- as.data.frame(colData(dds)) %>%  cbind(cmdscale(samplePoisDistMatrix))
ggplot(mdsPois, aes(x = `1`, y = `2`, color = id, shape = dex)) +
  geom_point(size = 3) + coord_fixed() + ggtitle("MDS with PoissonDistances")
dev.off()




dds <- DESeq(dds, fitType='local')

res <- results(dds, contrast = c("dex", "e14.5_molar", "e16.5_molar"), name="14v16")
res2 <- results(dds, contrast = c("dex", "e13.5_molar", "e16.5_molar"), name="13v16")
res3 <- results(dds, contrast = c("dex", "e13.5_molar", "e14.5_molar"), name="13v14")

resSig <- subset(res, padj < 0.05)
topupGenes<-resSig[resSig$log2FoldChange > 1.0 & resSig$padj < 0.05, ]
topdownGenes<-resSig[resSig$padj < 0.05 & resSig$log2FoldChange < -0.5, ]
topGenes<-resSig[resSig$log2FoldChange > 0.5 | resSig$log2FoldChange < -0.5, ]
topGenes<-topGenes[order(topGenes$log2FoldChange),]
topGeneswrite<-rbind(head(topGenes, 10), tail(topGenes,10))
write.table(topGeneswrite, file="E14vE16_highestGenes.txt")

resSig2 <- subset(res2, padj < 0.05)
topupGenes2<-resSig2[resSig2$log2FoldChange > 0.5 & resSig2$padj < 0.05, ]
topdownGenes2<-resSig2[resSig2$padj < 0.05 & resSig2$log2FoldChange < -0.5, ]
topGenes2<-resSig2[resSig2$log2FoldChange > 0.5 | resSig2$log2FoldChange < -0.5, ]
topGenes2<-topGenes2[order(topGenes2$log2FoldChange),]
topGenes2write<-rbind(head(topGenes2, 10), tail(topGenes2,10))
write.table(topGenes2write, file="E13vE16_highestGenes.txt")

resSig3 <- subset(res3, padj < 0.05)
topupGenes3<-resSig3[resSig3$log2FoldChange > 0.5 & resSig3$padj < 0.05, ]
topdownGenes3<-resSig3[resSig3$padj < 0.05 & resSig3$log2FoldChange < -0.5, ]
topGenes3<-resSig3[resSig3$log2FoldChange > 0.5 | resSig3$log2FoldChange < -0.5, ]
topGenes3<-topGenes3[order(topGenes3$log2FoldChange),]
topGenes3write<-rbind(head(topGenes3, 10), tail(topGenes3,10))
write.table(topGenes3write, file="E13vE14_highestGenes.txt")


###########Look at ontology of the top enriched genes in each comparison#################
E14upE16<-rownames(topupGenes)
E13upE14<-rownames(topupGenes3)
E13upE16<-rownames(topupGenes2)
E13downE14<-rownames(topdownGenes3)
E14downE16<-rownames(topdownGenes)
E13downE16<-rownames(topdownGenes2)

E13<-intersect(E13upE14, E13upE16)
E14<-intersect(E13downE14, E14upE16)
E16<-intersect(E13downE16, E14downE16)


x<-c('topupGenes', 'topupGenes2', 'topupGenes3', 'topdownGenes', 'topdownGenes2', 'topdownGenes3', 'E13', 'E14', 'E16')
x<-c('E13', 'E14', 'E16')
library(DOSE)
library(clusterProfiler)
flw<-vector("list", length(x))
background <- bitr(rownames(dds), fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Mm.eg.db")
data2<-NULL
convertHumanGeneList <- function(x){
require("biomaRt")
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
genesV2 = getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = x , mart = mouse, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=T)
humanx <- unique(genesV2[, 2])
# Print the first 6 genes found to the screen
print(head(humanx))
return(humanx)
}
library(clusterProfiler)
for (val in x){
value_bp <- enrichGO(gene = get(val),
                      universe = rownames(dds),
                      OrgDb = org.Mm.eg.db, 
                      keyType = 'SYMBOL',
                      readable = F,
                      ont = "BP",
                      qvalueCutoff = 0.05,
                      pAdjustMethod = "bonferroni")
netplot<-enrichplot::cnetplot(value_bp, layout='kk', categorySize='qvalue', circular=FALSE, color_category="red", color_gene="black", cex_label_category = 1.2, showCategory=10, node_label='all') + theme(aspect.ratio=1, legend.position='none', text = element_text(size = 8)) 
human_disease <- convertHumanGeneList((get(val)))
human_disease<-bitr(human_disease, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
human_disease_bg <- convertHumanGeneList(rownames(dds))
human_disease_bg <-bitr(human_disease_bg, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
#value_cc <- enrichDO(gene          = human_disease$ENTREZID,              ont           = "DO",              pvalueCutoff  = 0.05, universe      = human_disease_bg$ENTREZID,              minGSSize     = 5,              maxGSSize     = 500,              qvalueCutoff  = 0.05,              readable      = FALSE)
value_cc<-enrichDGN(human_disease$ENTREZID)
value_bp1<-simplify(value_bp, cutoff=0.75, by="qvalue")
value_bp1<-as.data.frame(value_bp)
assign(paste(val, "ontology", sep="_"), value_bp1)
l<-dotplot(value_bp, showCategory=10)
d<-barplot(value_cc, showCategory=10)
assign(paste(val, "dotplot", sep=""), l)
assign(paste(val, "netplot", sep=""), netplot)
assign(paste(val, "disease_barplot", sep=""), d)
}
pdf(file="DE_GO_dotplot.pdf", height=10, width=20)
E13netplot + ggtitle("Enriched GO Terms of Enriched Genes of the E13.5 Molar")
E13disease_barplot
E14netplot+ ggtitle("Enriched GO Terms of Enriched Genes of the E14.5 Molar")
E14disease_barplot
E16netplot+ ggtitle("Enriched GO Terms of Enriched Genes of the E16.5 Molar")
E16disease_barplot
dev.off()

setEPS()
postscript("networkplot_E13.5.eps", height=10, width=10)
E13netplot + ggtitle("Enriched GO Terms of Enriched Genes of the E13.5 Molar")
dev.off()

allTopGenes<-rownames(rbind(topGeneswrite, topGenes2write, topGenes3write))
allTopGenes<-unique(allTopGenes)
pdf(file='counts_topDEgenes.pdf')
for (gene in allTopGenes){
otop2Counts <- plotCounts(dds, gene=gene, intgroup=c("dex", 'id'), returnData=TRUE, replaced=TRUE, normalized=TRUE)
print(ggplot(otop2Counts, aes(x=dex, y=count, colour=id, group=dex)) + geom_point() + geom_line() + theme_bw() + theme(axis.text.x=element_text(angle=15, hjust=1)) + guides(colour=guide_legend(ncol=3)) + ggtitle(gene))
}
dev.off()

###################Look at the presence of cell type specific genes that are enriched in E13 molars
#tooth<-readRDS(file='~/cotney/analysis/scrna/e14_molar/for_publication/2_redo/FINAL_tooth_with_rep_data_renamed_clusters_EK_module_score.rds')
#library(Seurat)
#markers<-FindAllMarkers(tooth, logfc.threshold=0.25, test.use='DESeq2', min.diff.pct=0.25, max.cells.per.ident=400)
#write.table(markers, file="e14_molar_sc_markergenes_percluster.tsv", sep="\t")
markers<-read.table(file="e14_molar_sc_markergenes_percluster.tsv")


library(gridExtra)
library(grid)
library(ggplot2)
library(matrixStats)
library(ggplotify)
library(lattice)
# Make a heatmap
vsd<-vst(dds, blind=FALSE)
ekmarkers<-rownames(markers[markers$cluster == "Enamel Knot" & markers$avg_logFC > 0.5,])
topekmarkers<-rownames(markers[markers$cluster == "Enamel Knot" & markers$avg_logFC > 1.0,])
new <- assay(vsd)[rownames(assay(vsd)) %in% ekmarkers,]
new2 <- assay(vsd)[rownames(assay(vsd)) %in% topekmarkers,]
scaled<-scale(new)
e13<-scaled[,c(1:6)]
e13<-cbind(e13, rowMedians(as.matrix(e13)))
e16<-scaled[,c(14:20)]
e16<-cbind(e16, rowMedians(as.matrix(e16)))
combined<-cbind(e13, e16)
combined<-cbind(combined, c(combined[,7]-combined[,15]))
colnames(combined)[16]<-c("med_diff")
combined<-as.data.frame(combined)
combined<-combined[order(combined$med_diff, decreasing=TRUE),]
ordered<-rownames(combined)
ordered2<-ordered[ordered %in% topekmarkers]
new<-new[ordered,]
new2<-new2[ordered2,]
pdf(file="ekmarkers_heatmap_dynamics.pdf", height=10, width=10)
ekmarkerheatmap<-heatmap.2( new, scale="row", 
     trace="none", density.info=c('none'), dendrogram='none', Rowv=FALSE, Colv=FALSE,
     col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
     ColSideColors = c( e13.5_molar="gray", e14.5_molar="darkgreen", e16.5_molar="orange" )[
        colData(vsd)$dex ] ) + theme(aspect.ratio=1, legend.position='top')
topekmarkerheatmap<-heatmap.2( new2, scale="row", 
     trace="none", density.info=c('none'), Rowv=FALSE, Colv=FALSE, dendrogram='none',
     col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
     ColSideColors = c( e13.5_molar="gray", e14.5_molar="darkgreen", e16.5_molar="orange" )[
        colData(vsd)$dex ] ) + theme(aspect.ratio=1, legend.position='top')
dev.off()

jpeg(file="ekmarkers_heatmap_dynamics.jpg", height=1000, width=1000)
ekmarkerheatmap<-heatmap.2( new, scale="row", 
     trace="none", density.info=c('none'), dendrogram='none', Rowv=FALSE, Colv=FALSE,
     col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
     ColSideColors = c( e13.5_molar="gray", e14.5_molar="darkgreen", e16.5_molar="orange" )[
        colData(vsd)$dex ] ) + theme(aspect.ratio=1, legend.position='top')
dev.off()
jpeg(file="topekmarkers_heatmap_dynamics.jpg", height=1000, width=1000)
topekmarkerheatmap<-heatmap.2( new2, scale="row", 
     trace="none", density.info=c('none'), Rowv=FALSE, Colv=FALSE, dendrogram='none',
     col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
     ColSideColors = c( e13.5_molar="gray", e14.5_molar="darkgreen", e16.5_molar="orange" )[
        colData(vsd)$dex ] ) + theme(aspect.ratio=1, legend.position='top')
dev.off()

setEPS()
postscript("ekmarkers_heatmap_dynamics.eps", height=10, width=10)
ekmarkerheatmap<-heatmap.2( new, scale="row", 
     trace="none", density.info=c('none'), dendrogram='none', Rowv=FALSE, Colv=FALSE,
     col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
     ColSideColors = c( e13.5_molar="gray", e14.5_molar="darkgreen", e16.5_molar="orange" )[
        colData(vsd)$dex ] ) + theme(aspect.ratio=1, legend.position='top')
dev.off()
setEPS()
postscript("topekmarkers_heatmap_dynamics.eps", height=10, width=10)
topekmarkerheatmap<-heatmap.2( new2, scale="row", 
     trace="none", density.info=c('none'), Rowv=FALSE, Colv=FALSE, dendrogram='none',
     col = colorRampPalette( rev(brewer.pal(9, "RdBu")) )(255),
     ColSideColors = c( e13.5_molar="gray", e14.5_molar="darkgreen", e16.5_molar="orange" )[
        colData(vsd)$dex ] ) + theme(aspect.ratio=1, legend.position='top')
dev.off()



markers<-read.table(file="e14_molar_sc_markergenes_percluster.tsv")

topekmarkers<-rownames(markers[markers$avg_logFC > 1.0 & markers$cluster == "Enamel Knot" , ])
vsd<-vst(dds, blind=FALSE)
vsd_data <- as.data.frame(assay(vsd))

vsd<-assay(vsd)
vsd<-as.data.frame(vsd)
vsd$Gene<-rownames(vsd)


pdf(file='counts_topEKmarkergenes.pdf', height=30, width=20)
vsd <- vsd[vsd$Gene %in% topekmarkers,]
vsd <- melt(vsd, id.vars=c("Gene"))
vsd$dex<-gsub("molar_.*", "molar", vsd$variable)
ggplot(vsd, aes(x=dex, y=value, color=dex)) + scale_color_manual(values=c( 'e13.5_molar'="gray", 'e14.5_molar'="darkgreen", 'e16.5_molar'="orange" )) + geom_violin() + geom_boxplot(width=0.1, color="grey", alpha=0.2) + facet_wrap(. ~ Gene, ncol=8, scales="free") + theme(aspect.ratio = 1) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.text=element_text(size=12))
dev.off()

shhvsd<-vsd[grep("Shh", vsd$Gene),]
SHH<-ggplot(vsd, aes(x=dex, y=value, color=dex)) + geom_violin() + geom_boxplot(width=0.1, color="grey", alpha=0.2) + theme(aspect.ratio = 1) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.text=element_text(size=12), legend.position='none') + ggtitle("Shh") + ylim(5,17)+ scale_color_manual(values=c( 'e13.5_molar'="gray", 'e14.5_molar'="darkgreen", 'e16.5_molar'="orange" )) + geom_signif(comparisons = list(c('e13.5_molar', 'e14.5_molar'), c('e13.5_molar', 'e16.5_molar')), map_signif_level = TRUE, test = "wilcox.test", textsize = 8)

wntvsd<-vsd[grep("Wnt10b", vsd$Gene),]
WNT<-ggplot(vsd, aes(x=dex, y=value, color=dex)) + geom_violin() + geom_boxplot(width=0.1, color="grey", alpha=0.2) + theme(aspect.ratio = 1) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.text=element_text(size=12), legend.position='none') + ggtitle("Wnt") + ylim(7,16)+ scale_color_manual(values=c( 'e13.5_molar'="gray", 'e14.5_molar'="darkgreen", 'e16.5_molar'="orange" )) + geom_signif(comparisons = list(c('e13.5_molar', 'e14.5_molar'), c('e13.5_molar', 'e16.5_molar')), map_signif_level = TRUE, test = "wilcox.test", textsize = 8)




vsd<-vst(dds, blind=FALSE)
vsd<-assay(vsd)
vsd<-as.data.frame(vsd)
vsd <- vsd[rownames(vsd) %in% topekmarkers,]
sums<-as.data.frame(colSums(vsd))
sums$dex<-gsub("molar_.*", "molar", rownames(sums))
colnames(sums)<-c('sums', 'dex')
pdf('combinatorial_expression_EK_bulk.pdf')
combo<-ggplot(sums, aes(x=dex, y=sums, color=dex))+ scale_color_manual(values=c( 'e13.5_molar'="gray", 'e14.5_molar'="darkgreen", 'e16.5_molar'="orange" )) + geom_violin() + geom_boxplot(width=0.1, color="grey", alpha=0.2) + geom_signif(comparisons = list(c('e13.5_molar', 'e14.5_molar'), c('e13.5_molar', 'e16.5_molar'), c('e14.5_molar', 'e16.5_molar')), map_signif_level = TRUE, test = "wilcox.test", textsize = 8) + theme(aspect.ratio = 1) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.text=element_text(size=12), legend.position='none') + ggtitle('Combinatorial EK Gene Signature Expression') + ylim(575, 675) 
combo
dev.off()





library(ggplotify)
library(permute)
background <- bitr(rownames(dds), fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Mm.eg.db")
data2<-NULL




markers<-read.table(file="e14_molar_sc_markergenes_percluster.tsv")

vsd<-vst(dds, blind=FALSE)
vsd_data <- as.data.frame(assay(vsd))

ekmarkers<-rownames(markers[markers$avg_logFC > 0.5 & markers$cluster == "Enamel Knot" , ])

topekmarkers<-rownames(markers[markers$avg_logFC > 1.0 & markers$cluster == "Enamel Knot" , ])

nodes<-c('ekmarkers', 'topekmarkers')
for (NODENAME3 in nodes){
NODENAME<-get(NODENAME3)
print(NODENAME3)
pdf(file=paste(NODENAME3, 'DEGenesVenn_Stats.pdf', sep=""), height=15, width=10)
for(timepoints in x){
print(timepoints)
timepoint<-get(timepoints)
completely_contained1 <- euler(c("A" = length(setdiff(NODENAME, timepoint)), "B" = length(setdiff(timepoint, NODENAME)), "A&B" = (length(NODENAME) - length(setdiff(NODENAME, timepoint)))))
p3<-as.ggplot(plot(completely_contained1, labels = c(paste(NODENAME3, "Genes", sep=' '), paste(timepoints, "Genes", sep=' ')), fills = list(fill=c("red", "purple"), alpha=0.3), quantities=TRUE, legend=FALSE))
p3<-p3+theme(aspect.ratio=1)
len<-length(NODENAME)
d<-NULL
abline<-length(intersect(timepoint, NODENAME))+5
for (i in 1:10000){
markers<-sample(allgenes,len)
d<-rbind(d, length(intersect(markers, timepoint)))
}
t<-table(d)
print(t)
print(length(intersect(timepoint, NODENAME)))
expectedoverlaplogfc<-log2(length(intersect(timepoint, NODENAME))/mean(d))
print(expectedoverlaplogfc)
assign(paste(NODENAME3, timepoints, sep=""), expectedoverlaplogfc)
#value_bp <- enrichGO(gene = NODENAME, universe = rownames(dds), OrgDb = org.Mm.eg.db,  keyType = 'SYMBOL', readable = F, ont = "BP", qvalueCutoff = 0.05, pAdjustMethod = "bonferroni")
#plott<-as.ggplot(dotplot(value_bp, showCategory=10)) + theme(aspect.ratio = 1) + ggtitle(x)
#human_disease <- convertHumanGeneList(NODENAME)
#human_disease<-bitr(human_disease, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
#value_cc<-enrichDGN(human_disease$ENTREZID)
#plott2<-as.ggplot(barplot(value_cc, showCategory=10)) + theme(aspect.ratio = 1)
print(p3)
#print(plott)
plot(t, xlim=c(1,abline)) 
abline(v=length(intersect(timepoint, NODENAME)))
labs(main=paste("Number of EK Marker Genes From Random Sampling of", len, "Random Genes", sep=" "), xlab="Number of Overlapping Genes with EK", ylab="Frequency")
}
dev.off()
}







completely_contained1 <- euler(c("A" = length(setdiff(topekmarkers, E13)), "B" = length(setdiff(E13, topekmarkers)), "A&B" = (length(topekmarkers) - length(setdiff(topekmarkers, E13)))))
p3<-as.ggplot(plot(completely_contained1, labels =c(c('Top EK Marker Genes'), c('E13 DEGs')), fills = list(fill=c("red", "grey"), alpha=0.3), quantities=TRUE, legend=FALSE))
p3<-p3+theme(aspect.ratio=1)
completely_contained2 <- euler(c("A" = length(setdiff(ekmarkers, E13)), "B" = length(setdiff(E13, ekmarkers)), "A&B" = (length(ekmarkers) - length(setdiff(ekmarkers, E13)))))

p4<-as.ggplot(plot(completely_contained2, labels =c(c('EK Marker Genes'), c('E13 DEGs')), fills = list(fill=c("orange", "grey"), alpha=0.3), quantities=TRUE, legend=FALSE))
p4<-p4+theme(aspect.ratio=1)


E13net<-E13netplot + ggtitle("Enriched GO Terms of Enriched Genes of the E13.5 Molar")


pdf(file="Figure6.pdf", height=20, width=20)
fig6<-E13net/((SHH|WNT)/(p4|p3))
fig6
dev.off()


jpeg(file="Figure6_withoutheatmap.jpeg", height=2000, width=2000)
fig6
dev.off()

setEPS()
postscript("Figure6_withoutheapmap.eps", height=25, width=25)
fig6
dev.off()

